#!/usr/bin/env python3
# -*- coding: utf-8 -*-


def add_two(a):
    """
    Функция позволяет складывать переданный ей аргумент с локальной переменной x.
    Функция показывает пример локальной переменной (переменная x).
    """
    x = 2
    return a + x


def add_four(a):
    """
    Функция показывает пример использования области видимости enclosing.
    Переменная x имеет область видимости enclosing для функции add_some().
    """
    x = 2

    def add_some():
        print("x = " + str(x))
        return a + x
    return add_some()


example_x = 4  # глобальная переменная для функции fun()


def fun():
    """
    Функция показывает пример применения глобальной переменной.
    Глобальной переменной (Global) является example_x,
    так как она была объявлена в этом модуле (в файле с расширением .py).
    """
    print(example_x + 3)


def mul(a, b):
    """
    Функция перемножает переденные ей параметры a и b.
    """
    return a * b


def mul5(a):
    """
    Функция вызывает функцию mul() и передает ей параметр 5
    в добавление к переданному ей параметру a.
    """
    return mul(5, a)


def mul_5(a):
    """
    Функция с использованием замыкания.
    """
    def helper(b):
        return a * b
    return helper


def fun1(a):
    """
    Пример функции, использующей замыкание.
    В функции fun1() объявлена локальная переменная x, значение которой определяется
    аргументом a. В функции fun2() используются эта же переменная x, nonlocal указывает
    на то, что эта переменная не является локальной, следовательно, ее значение будет
    взято из ближайшей области видимости, в которой существует переменная с таким же именем.
    В нашем случае – это область enclosing, в которой этой переменной x присваивается
    значение a * 3. Также как и в предыдущем случае, на переменную x после вызова fun1(4),
    сохраняется ссылка, поэтому она не уничтожается.
    """
    x = a * 3

    def fun2(b):
        nonlocal x
        return b + x
    return fun2


if __name__ == "__main__":
    print(add_two(3))

    print(add_four(5))

    fun()

    print(mul(3, 4))

    print(mul5(7))

    new_mul5 = mul_5(5)
    new_mul5(2)
    new_mul5(7)

    test_fun = fun1(4)
    print(test_fun(7))
